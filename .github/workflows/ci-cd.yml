name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Basic Build Test
  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create environment file for build
      run: |
        echo "NODE_ENV=production" > .env.local
        echo "VITE_APP_ENV=production" >> .env.local
        echo "VITE_APP_VERSION=1.0.0" >> .env.local
        echo "VITE_FIREBASE_API_KEY=dummy" >> .env.local
        echo "VITE_FIREBASE_AUTH_DOMAIN=dummy.firebaseapp.com" >> .env.local
        echo "VITE_FIREBASE_PROJECT_ID=dummy" >> .env.local
        echo "VITE_FIREBASE_STORAGE_BUCKET=dummy.appspot.com" >> .env.local
        echo "VITE_FIREBASE_MESSAGING_SENDER_ID=123456789" >> .env.local
        echo "VITE_FIREBASE_APP_ID=1:123456789:web:abcdef" >> .env.local
        echo "VITE_ZOOM_ENABLED=false" >> .env.local
        echo "VITE_ANALYTICS_ENABLED=false" >> .env.local
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  # Security Audit (Non-blocking)
  security-audit:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high || true

  # Deploy to Production (only on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Deploy to Netlify (Production)
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=dist --site=${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      if: ${{ secrets.NETLIFY_AUTH_TOKEN != '' && secrets.NETLIFY_PRODUCTION_SITE_ID != '' }}

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Delete build artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: build-artifacts